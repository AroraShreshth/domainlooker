import { DNSService } from '../../src/services/dns';
import * as dns from 'dns';

// Mock the dns module
jest.mock('dns', () => ({
  promises: {
    resolve4: jest.fn(),
    resolve6: jest.fn(),
    resolveMx: jest.fn(),
    resolveNs: jest.fn(),
    resolveTxt: jest.fn(),
    resolveSoa: jest.fn(),
    resolveCname: jest.fn()
  }
}));

const mockDns = dns as jest.Mocked<typeof dns>;

describe('DNSService', () => {
  let dnsService: DNSService;

  beforeEach(() => {
    dnsService = new DNSService();
    jest.clearAllMocks();
  });

  describe('lookup', () => {
    const mockDomain = 'example.com';

    beforeEach(() => {
      // Setup default successful mocks
      mockDns.promises.resolve4.mockResolvedValue(['192.0.2.1', '192.0.2.2']);
      mockDns.promises.resolve6.mockResolvedValue(['2001:db8::1']);
      mockDns.promises.resolveMx.mockResolvedValue([
        { priority: 10, exchange: 'mail.example.com' }
      ]);
      mockDns.promises.resolveNs.mockResolvedValue(['ns1.example.com', 'ns2.example.com']);
      mockDns.promises.resolveTxt.mockResolvedValue([['v=spf1 include:_spf.example.com ~all']]);
      mockDns.promises.resolveSoa.mockResolvedValue({
        nsname: 'ns1.example.com',
        hostmaster: 'admin.example.com',
        serial: 2023010101,
        refresh: 3600,
        retry: 1800,
        expire: 604800,
        minttl: 86400
      });
      mockDns.promises.resolveCname.mockRejectedValue(new Error('No CNAME record'));
    });

    it('should resolve all DNS record types successfully', async () => {
      const result = await dnsService.lookup(mockDomain);

      expect(result.a).toEqual(['192.0.2.1', '192.0.2.2']);
      expect(result.aaaa).toEqual(['2001:db8::1']);
      expect(result.mx).toEqual([{ priority: 10, exchange: 'mail.example.com' }]);
      expect(result.ns).toEqual(['ns1.example.com', 'ns2.example.com']);
      expect(result.txt).toEqual(['v=spf1 include:_spf.example.com ~all']);
      expect(result.soa).toEqual({
        primary: 'ns1.example.com',
        admin: 'admin.example.com',
        serial: 2023010101,
        refresh: 3600,
        retry: 1800,
        expiration: 604800,
        minimum: 86400
      });
    });

    it('should handle partial DNS resolution failures gracefully', async () => {
      // Mock some failures
      mockDns.promises.resolve4.mockRejectedValue(new Error('No A record'));
      mockDns.promises.resolve6.mockRejectedValue(new Error('No AAAA record'));

      const result = await dnsService.lookup(mockDomain);

      expect(result.a).toBeUndefined();
      expect(result.aaaa).toBeUndefined();
      expect(result.mx).toEqual([{ priority: 10, exchange: 'mail.example.com' }]);
      expect(result.ns).toEqual(['ns1.example.com', 'ns2.example.com']);
    });

    it('should handle complete DNS resolution failure', async () => {
      // Mock all DNS calls to fail
      mockDns.promises.resolve4.mockRejectedValue(new Error('DNS failure'));
      mockDns.promises.resolve6.mockRejectedValue(new Error('DNS failure'));
      mockDns.promises.resolveMx.mockRejectedValue(new Error('DNS failure'));
      mockDns.promises.resolveNs.mockRejectedValue(new Error('DNS failure'));
      mockDns.promises.resolveTxt.mockRejectedValue(new Error('DNS failure'));
      mockDns.promises.resolveSoa.mockRejectedValue(new Error('DNS failure'));

      await expect(dnsService.lookup(mockDomain)).rejects.toThrow();
    });

    it('should format SOA record correctly', async () => {
      const result = await dnsService.lookup(mockDomain);

      expect(result.soa).toEqual({
        primary: 'ns1.example.com',
        admin: 'admin.example.com',
        serial: 2023010101,
        refresh: 3600,
        retry: 1800,
        expiration: 604800,
        minimum: 86400
      });
    });

    it('should flatten TXT records correctly', async () => {
      mockDns.promises.resolveTxt.mockResolvedValue([
        ['v=spf1 include:_spf.example.com ~all'],
        ['google-site-verification=abc123']
      ]);

      const result = await dnsService.lookup(mockDomain);

      expect(result.txt).toEqual([
        'v=spf1 include:_spf.example.com ~all',
        'google-site-verification=abc123'
      ]);
    });

    it('should handle CNAME records when available', async () => {
      mockDns.promises.resolveCname.mockResolvedValue(['target.example.com']);

      const result = await dnsService.lookup(mockDomain);

      expect(result.cname).toEqual(['target.example.com']);
    });

    it('should call DNS methods with correct domain', async () => {
      await dnsService.lookup(mockDomain);

      expect(mockDns.promises.resolve4).toHaveBeenCalledWith(mockDomain);
      expect(mockDns.promises.resolve6).toHaveBeenCalledWith(mockDomain);
      expect(mockDns.promises.resolveMx).toHaveBeenCalledWith(mockDomain);
      expect(mockDns.promises.resolveNs).toHaveBeenCalledWith(mockDomain);
      expect(mockDns.promises.resolveTxt).toHaveBeenCalledWith(mockDomain);
      expect(mockDns.promises.resolveSoa).toHaveBeenCalledWith(mockDomain);
      expect(mockDns.promises.resolveCname).toHaveBeenCalledWith(mockDomain);
    });

    it('should handle empty DNS responses', async () => {
      mockDns.promises.resolve4.mockResolvedValue([]);
      mockDns.promises.resolveMx.mockResolvedValue([]);

      const result = await dnsService.lookup(mockDomain);

      expect(result.a).toEqual([]);
      expect(result.mx).toEqual([]);
    });
  });
});