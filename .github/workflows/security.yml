name: Security & Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - 'package*.json'
      - '.github/workflows/security.yml'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: |
        echo "🔍 Running npm security audit..."
        npm audit --audit-level=low --json > audit-results.json || true
        
        # Check if there are any vulnerabilities
        VULN_COUNT=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0')
        echo "Found $VULN_COUNT total vulnerabilities"
        
        if [ "$VULN_COUNT" -gt 0 ]; then
          echo "⚠️ Security vulnerabilities found!"
          cat audit-results.json | jq '.vulnerabilities // empty'
          
          # Try to fix automatically
          echo "🔧 Attempting automatic fixes..."
          npm audit fix --force || true
          
          # Create issue if vulnerabilities still exist
          FIXED_VULN_COUNT=$(npm audit --audit-level=low --json | jq '.metadata.vulnerabilities.total // 0')
          if [ "$FIXED_VULN_COUNT" -gt 0 ]; then
            echo "❌ Could not automatically fix all vulnerabilities"
            echo "SECURITY_ISSUE=true" >> $GITHUB_ENV
          else
            echo "✅ All vulnerabilities fixed automatically"
          fi
        else
          echo "✅ No security vulnerabilities found"
        fi
        
    - name: Check for outdated dependencies
      run: |
        echo "📦 Checking for outdated dependencies..."
        npm outdated --json > outdated.json || true
        
        OUTDATED_COUNT=$(cat outdated.json | jq '. | length')
        echo "Found $OUTDATED_COUNT outdated packages"
        
        if [ "$OUTDATED_COUNT" -gt 0 ]; then
          echo "📋 Outdated packages:"
          cat outdated.json | jq -r 'to_entries[] | "- \(.key): \(.value.current) → \(.value.latest)"'
          echo "OUTDATED_DEPS=true" >> $GITHUB_ENV
        fi
        
    - name: Test with updated dependencies
      if: env.OUTDATED_DEPS == 'true'
      run: |
        echo "🧪 Testing compatibility with updated dependencies..."
        npm update --save
        npm run build
        npm run test:core
        
    - name: Archive security results
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: |
          audit-results.json
          outdated.json
        retention-days: 30

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Analyze bundle size
      run: |
        echo "📊 Analyzing package size and dependencies..."
        
        echo "## Package Size Analysis" > size-report.md
        echo "Generated on: $(date)" >> size-report.md
        echo "" >> size-report.md
        
        # Package size
        echo "### Package Size" >> size-report.md
        npm pack --dry-run > pack-output.txt 2>&1
        grep -E "(package size|unpacked size|total files)" pack-output.txt >> size-report.md || true
        echo "" >> size-report.md
        
        # Dependency count
        echo "### Dependencies" >> size-report.md
        DEP_COUNT=$(cat package.json | jq '.dependencies | length')
        DEV_DEP_COUNT=$(cat package.json | jq '.devDependencies | length')
        echo "- Production dependencies: $DEP_COUNT" >> size-report.md
        echo "- Development dependencies: $DEV_DEP_COUNT" >> size-report.md
        echo "" >> size-report.md
        
        # List production dependencies
        echo "### Production Dependencies" >> size-report.md
        cat package.json | jq -r '.dependencies | to_entries[] | "- \(.key): \(.value)"' >> size-report.md
        
        cat size-report.md
        
    - name: Check for security advisories
      run: |
        echo "🔒 Checking for security advisories in dependencies..."
        npx auditjs ossi --json > advisory-check.json || true
        
        if [ -s advisory-check.json ]; then
          echo "⚠️ Security advisories found"
          cat advisory-check.json
        else
          echo "✅ No security advisories found"
        fi
        
    - name: Upload dependency analysis
      uses: actions/upload-artifact@v4
      with:
        name: dependency-analysis
        path: |
          size-report.md
          advisory-check.json
          pack-output.txt
        retention-days: 30

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check dependency licenses
      run: |
        echo "📜 Checking dependency licenses..."
        npx license-checker --json > licenses.json
        
        echo "## License Report" > license-report.md
        echo "Generated on: $(date)" >> license-report.md
        echo "" >> license-report.md
        
        # Count licenses
        LICENSE_COUNT=$(cat licenses.json | jq '. | length')
        echo "Total packages: $LICENSE_COUNT" >> license-report.md
        echo "" >> license-report.md
        
        # Group by license type
        echo "### License Distribution" >> license-report.md
        cat licenses.json | jq -r '. | group_by(.licenses) | .[] | "\(.[0].licenses): \(length) packages"' | sort >> license-report.md
        
        echo "" >> license-report.md
        echo "### Packages by License" >> license-report.md
        cat licenses.json | jq -r 'to_entries[] | "- \(.key): \(.value.licenses)"' | sort >> license-report.md
        
        cat license-report.md
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: |
          licenses.json
          license-report.md
        retention-days: 90