name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint --if-present
      
    - name: Run type checking
      run: npm run typecheck --if-present
      
    - name: Build project
      run: npm run build
      
    - name: Run core tests
      run: npm run test:core
      
    - name: Test CLI functionality
      run: |
        # Test basic CLI commands
        node dist/index.js --version
        node dist/index.js --help
        # Test actual domain analysis (quick mode to avoid timeouts)
        timeout 30s node dist/index.js example.com --quick --no-banner || true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for known vulnerabilities
      run: npm audit --fix --dry-run

  build-matrix:
    name: Build & Package Test
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Test package creation
      run: npm pack --dry-run
      
    - name: Test global installation simulation
      run: |
        # Create a test directory and simulate global install
        mkdir -p test-install
        cd test-install
        npm init -y
        npm install ../domainlooker-*.tgz || npm install ..
      
    - name: Basic functionality test
      run: |
        # Test that the CLI can run basic commands
        node dist/index.js --version
        node dist/index.js --help

  code-quality:
    name: Code Quality & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run tests with coverage
      run: npm run test:coverage --if-present || npm run test:core
      
    - name: Check bundle size
      run: |
        echo "📦 Package size analysis:"
        npm pack --dry-run
        echo "📊 Built files:"
        du -sh dist/
        echo "🔍 Largest files:"
        find dist/ -type f -exec du -h {} + | sort -rh | head -10

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Test domain analysis workflow
      run: |
        echo "🧪 Testing domain analysis workflow..."
        
        # Test single domain
        echo "Testing single domain analysis..."
        timeout 45s node dist/index.js example.com --quick --no-banner --export-json test-single.json || echo "Single domain test completed"
        
        # Test multiple domains
        echo "Testing multiple domain analysis..."
        timeout 60s node dist/index.js example.com httpbin.org --quick --no-banner --export-csv test-multi.csv || echo "Multi domain test completed"
        
        # Verify exports were created
        if [ -f "test-single.json" ]; then
          echo "✅ JSON export created successfully"
          # Basic JSON validation
          node -e "JSON.parse(require('fs').readFileSync('test-single.json', 'utf8')); console.log('✅ JSON is valid')"
        fi
        
        if [ -f "test-multi.csv" ]; then
          echo "✅ CSV export created successfully"
          echo "CSV headers:" 
          head -1 test-multi.csv
        fi
        
    - name: Archive test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-exports
        path: |
          test-*.json
          test-*.csv
        retention-days: 7

  publish-ready:
    name: Publish Readiness Check
    runs-on: ubuntu-latest
    needs: [test, security, build-matrix]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run prepublish checks
      run: npm run prepublishOnly
      
    - name: Check package contents
      run: |
        echo "📦 Package contents that would be published:"
        npm pack --dry-run
        
    - name: Validate package.json
      run: |
        echo "✅ Validating package.json..."
        node -e "
          const pkg = require('./package.json');
          const required = ['name', 'version', 'description', 'main', 'bin', 'keywords', 'author', 'license'];
          const missing = required.filter(field => !pkg[field]);
          if (missing.length > 0) {
            console.error('❌ Missing required fields:', missing);
            process.exit(1);
          }
          console.log('✅ package.json is valid');
          console.log('📋 Package info:');
          console.log('  Name:', pkg.name);
          console.log('  Version:', pkg.version);
          console.log('  Keywords:', pkg.keywords.length, 'keywords');
        "
    
    - name: Generate release notes
      if: github.event_name == 'push'
      run: |
        echo "🚀 Release readiness summary:" > release-notes.md
        echo "- ✅ All tests passing" >> release-notes.md
        echo "- ✅ Security audit clean" >> release-notes.md
        echo "- ✅ Multi-platform compatibility verified" >> release-notes.md
        echo "- ✅ Package structure validated" >> release-notes.md
        echo "- 📦 Ready for npm publish" >> release-notes.md
        
    - name: Upload release notes
      uses: actions/upload-artifact@v4
      if: github.event_name == 'push'
      with:
        name: release-notes
        path: release-notes.md
        retention-days: 30